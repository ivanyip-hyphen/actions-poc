name: CI

on:
  workflow_dispatch:
    inputs:
      singsaver:
        required: false
        type: boolean
        description: singsaver
      moneyhero:
        required: false
        type: boolean
        description: moneyhero
      money101:
        required: false
        type: boolean
        description: money101
      comparehero:
        required: false
        type: boolean
        description: comparehero
      moneyguru:
        required: false
        type: boolean
        description: moneyguru
      moneymax:
        required: false
        type: boolean
        description: moneymax
      dry_run:
        description: Dry run?
        required: false

jobs:
  gen-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo '::echo::on'
          market=()
          if ${{ github.event.inputs.singsaver }}; then market+=('singsaver'); fi;
          if ${{ github.event.inputs.moneyhero }}; then market+=('moneyhero'); fi;
          if ${{ github.event.inputs.money101 }}; then market+=('money101'); fi;
          if ${{ github.event.inputs.comparehero }}; then market+=('comparehero'); fi;
          if ${{ github.event.inputs.moneyguru }}; then market+=('moneyguru'); fi;
          if ${{ github.event.inputs.moneymax }}; then market+=('moneymax'); fi;
          echo "::set-output name=matrix::{\"market\": $(jq --compact-output --null-input '$ARGS.positional' --args "${market[@]}")}"

  build:
    needs: gen-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.gen-matrix.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
        name: checkout commit

      - name: Print
        run: | 
          echo "environment is ${{ github.event.inputs.environment }}"
          echo "boolean is ${{ github.event.inputs.boolean }}"
          echo "commit is ${{ github.event.inputs.commit }}"
          echo "sha is $(git rev-parse --short HEAD)"
          echo "ref is ${{ github.ref }}"
          echo "matrix is ${{fromJSON(needs.gen-matrix.outputs.matrix)}}"
          echo "market is ${{matrix.market}}"
          echo ${GITHUB_REF##*/}
          echo ${{ github.ref }}

      - uses: oprypin/find-latest-tag@v1.1.0
        id: baseref
        with:
          repository: ${{ github.repository }}
          prefix: 'deploy-${{ matrix.market }}-'
          releases-only: true

      - name: Log Last Release Tag
        run: echo '${{ steps.baseref.outputs.tag }}'

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v1.0.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          head-ref: ${{ github.sha }}
          base-ref: ${{ steps.baseref.outputs.tag }}

      - name: Log changelog
        run: echo '${{ steps.changelog.outputs.changelog }}'

      - id: sha_short
        run: echo "::set-output name=val::$(git rev-parse --short HEAD)"

      - name: Get Tag
        id: get_tag
        run: echo "::set-output name=val::deploy-${{ matrix.market }}-$(git rev-parse --short HEAD)"
      
      - name: Tag Version
        uses: mathieudutour/github-tag-action@v6.0
        if: ${{ !github.event.inputs.dry_run }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.get_tag.outputs.val }}
          tag_prefix: ''
          dry_run: ${{ github.event.inputs.dry_run }}

      - name: Create Release
        id: create_release
        if: ${{ !github.event.inputs.dry_run }}
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.val }}
          release_name: Release ${{ steps.sha_short.outputs.val }} to ${{ matrix.market }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false


      - name: Prepare ITSM ticket
        id: prepare_ticket
        run: |
          ticket_data='{ "name": "ECMS-Release", "release": "${{ steps.sha_short.outputs.val }}", "id_git": "${{ steps.market.outputs.name }}", "description": "${{ steps.get_tag.outputs.tag }}"}'
          echo "::set-output name=val::$ticket_data"